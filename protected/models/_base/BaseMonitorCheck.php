<?php

/**
 * This is the model base class for the table "{{monitor_check}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MonitorCheck".
 *
 * Columns in table "{{monitor_check}}" available as properties of the model,
 * followed by relations of table "{{monitor_check}}" available as properties of the model.
 *
 * @property string $id
 * @property string $monitor_id
 * @property string $date
 * @property double $percentage
 * @property double $average_number
 * @property string $tc_comment
 * @property string $creator_id
 * @property integer $ordering
 * @property string $created_at
 * @property string $updated_at
 * @property integer $status
 * @property integer $is_deleted
 * @property string $params
 *
 * @property MiteMonitor $monitor
 */
abstract class BaseMonitorCheck extends SimbActiveRecord{
	
    public static function model($className=__CLASS__)
    {
		return parent::model($className);
	}

	public function tableName()
    {
		return '{{monitor_check}}';
	}

	public static function representingColumn()
    {
		return 'date';
	}

	public function rules()
    {
		return array(
			array('monitor_id, date', 'required','except' => 'search'),
			array('ordering, status, is_deleted', 'numerical', 'integerOnly'=>true),
			array('percentage, average_number', 'numerical'),
			array('monitor_id, creator_id', 'length', 'max'=>20),
			array('tc_comment, created_at, updated_at, params', 'safe'),
			array('percentage, average_number, tc_comment, creator_id, ordering, created_at, updated_at, status, is_deleted, params', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, monitor_id, block, property,mite, grower, date, percentage, average_number, tc_comment, creator_id, ordering, created_at, updated_at, status, is_deleted, params, rowsPerPage', 'safe', 'on'=>'search'),
		);
	}

	public function relations()
    {
		return array(
			'monitor' => array(self::BELONGS_TO, 'MiteMonitor', 'monitor_id'),
				
		);
	}

	public function pivotModels()
    {
		return array(
		);
	}

	public function attributeLabels()
    {
		return array(
			'id' => Yii::t('app', 'ID'),
			'monitor_id' => Yii::t('app', 'Monitor'),
			'date' => Yii::t('app', 'Date'),
			'percentage' => Yii::t('app', 'Percentage'),
			'average_number' => Yii::t('app', 'Average Number'),
			'tc_comment' => Yii::t('app', 'Tc Comment'),
			'creator_id' => Yii::t('app', 'Creator'),
			'ordering' => Yii::t('app', 'Ordering'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'status' => Yii::t('app', 'Status'),
			'is_deleted' => Yii::t('app', 'Is Deleted'),
			'params' => Yii::t('app', 'Params'),
		);
	}

	public function search()
    {
		$criteria = new CDbCriteria;
	
		$criteria->with=array('block','property','grower');
		$criteria->compare('id', $this->id, true);
		$criteria->compare('monitor_id', $this->monitor_id);
		$criteria->compare('block.id', $this->block);
		$criteria->compare('property.id', $this->property);
		$criteria->compare('grower.id', $this->grower);
		$criteria->compare('date', $this->date, true);
		
		$criteria->compare('percentage', $this->percentage);
		$criteria->compare('average_number', $this->average_number);
		$criteria->compare('tc_comment', $this->tc_comment, true);
		$criteria->compare('creator_id', $this->creator_id, true);
		$criteria->compare('ordering', $this->ordering);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('is_deleted', $this->is_deleted);
		$criteria->compare('params', $this->params, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination' => array(
				'pageSize' => $this->rowsPerPage,
			)
		));
	}
}