<?php

/**
 * This is the model base class for the table "{{block}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Block".
 *
 * Columns in table "{{block}}" available as properties of the model,
 * followed by relations of table "{{block}}" available as properties of the model.
 *
 * @property integer $block_id
 * @property integer $property_id
 * @property string $block_name
 * @property string $block_tree_spacing
 * @property double $block_row_width
 *
 * @property Biofix[] $biofixes
 * @property Property $property
 */
abstract class BaseBlock extends GxActiveRecord{
    public static function model($className=__CLASS__)
    {
		return parent::model($className);
	}

	public function tableName()
    {
		return '{{block}}';
	}

	public static function representingColumn()
    {
		return 'block_name';
	}

	public function rules()
    {
		return array(
			array('property_id, block_name', 'required'),
			array('property_id', 'numerical', 'integerOnly'=>true),
			array('block_row_width', 'numerical'),
			array('block_name', 'length', 'max'=>45),
			array('block_tree_spacing', 'length', 'max'=>11),
			array('block_tree_spacing, block_row_width', 'default', 'setOnEmpty' => true, 'value' => null),
			array('block_id, property_id, block_name, block_tree_spacing, block_row_width, rowsPerPage', 'safe', 'on'=>'search'),
		);
	}

	public function relations()
    {
		return array(
			'biofixes' => array(self::HAS_MANY, 'Biofix', 'block_id'),
			'property' => array(self::BELONGS_TO, 'Property', 'property_id'),
		);
	}

	public function pivotModels()
    {
		return array(
		);
	}

	public function attributeLabels()
    {
		return array(
			'block_id' => Yii::t('app', 'Block'),
			'property_id' => Yii::t('app', 'Property'),
			'block_name' => Yii::t('app', 'Block Name'),
			'block_tree_spacing' => Yii::t('app', 'Block Tree Spacing'),
			'block_row_width' => Yii::t('app', 'Block Row Width'),
		);
	}

	public function search()
    {
		$criteria = new CDbCriteria;

		$criteria->compare('block_id', $this->block_id);
		$criteria->compare('property_id', $this->property_id);
		$criteria->compare('block_name', $this->block_name, true);
		$criteria->compare('block_tree_spacing', $this->block_tree_spacing, true);
		$criteria->compare('block_row_width', $this->block_row_width);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination' => array(
				'pageSize' => $this->rowsPerPage,
			)
		));
	}
}