<?php

/**
 * This is the model base class for the table "{{user_roles}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UserRole".
 *
 * Columns in table "{{user_roles}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $name
 * @property string $slug
 * @property string $parent_id
 * @property integer $level
 * @property string $permission_weight
 * @property integer $backend_accessible
 * @property string $creator_id
 * @property integer $ordering
 * @property string $created_at
 * @property string $updated_at
 * @property integer $status
 * @property integer $is_deleted
 * @property string $params
 *
 */
abstract class BaseUserRole extends SimbActiveRecordItem{
    public static function model($className=__CLASS__)
    {
		return parent::model($className);
	}

	public function tableName()
    {
		return '{{user_roles}}';
	}

	public static function representingColumn()
    {
		return 'name';
	}

	public function rules()
    {
		return array(
			array('name, slug', 'required'),
			array('level, backend_accessible, ordering, status, is_deleted', 'numerical', 'integerOnly'=>true),
			array('name, slug', 'length', 'max'=>255),
			array('parent_id, permission_weight, creator_id', 'length', 'max'=>20),
			array('created_at, updated_at, params', 'safe'),
			array('parent_id, level, permission_weight, backend_accessible, creator_id, ordering, created_at, updated_at, status, is_deleted, params', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, slug, parent_id, level, permission_weight, backend_accessible, creator_id, ordering, created_at, updated_at, status, is_deleted, params, rowsPerPage', 'safe', 'on'=>'search'),
		);
	}

	public function relations()
    {
		return array(
		);
	}

	public function pivotModels()
    {
		return array(
		);
	}

	public function attributeLabels()
    {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'slug' => Yii::t('app', 'Slug'),
			'parent_id' => Yii::t('app', 'Parent'),
			'level' => Yii::t('app', 'Level'),
			'permission_weight' => Yii::t('app', 'Permission Weight'),
			'backend_accessible' => Yii::t('app', 'Backend Accessible'),
			'creator_id' => Yii::t('app', 'Creator'),
			'ordering' => Yii::t('app', 'Ordering'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'status' => Yii::t('app', 'Status'),
			'is_deleted' => Yii::t('app', 'Is Deleted'),
			'params' => Yii::t('app', 'Params'),
		);
	}

	public function search()
    {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('slug', $this->slug, true);
		$criteria->compare('parent_id', $this->parent_id, true);
		$criteria->compare('level', $this->level);
		$criteria->compare('permission_weight', $this->permission_weight, true);
		$criteria->compare('backend_accessible', $this->backend_accessible);
		$criteria->compare('creator_id', $this->creator_id, true);
		$criteria->compare('ordering', $this->ordering);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('is_deleted', $this->is_deleted);
		$criteria->compare('params', $this->params, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination' => array(
				'pageSize' => $this->rowsPerPage,
			)
		));
	}
}