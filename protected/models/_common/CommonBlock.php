<?php
/**
 * This is the model base class for the table "{{block}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Block".
 *
 * Columns in table "{{block}}" available as properties of the model,
 * followed by relations of table "{{block}}" available as properties of the model.
 *
 * @property Grower $grower
 * @property Location $location
 */
Yii::import('application.models._base.BaseBlock');

class CommonBlock extends BaseBlock
{
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }
    
      /**
     * default scope
     * @return array
     * @see defaultScope
     */
    public function defaultScope(){
    	return array(
    			'alias'=>'block',
    			'condition'=>'block.is_deleted=0',
    			//'order'=>'artwork.sort ASC'
    	);
    }
    
    /**
     * scope of yii
     * @return array
     * @see scope of yii
     */
    public function scopes(){
    	return array(
    			'latest'=>array(
    					'order'=>'block.created_at DESC'
    			),
    			'sort'=>array(
    					'order'=>'block.ordering ASC',
    			)
    	);
    }
    
    /**
     * @return array
     */
    public function relations()
    {
    	// NOTE: you may need to adjust the relation name and the related
    	// class name for the relations automatically generated below.
    	$oldValue = parent::relations();
    	return CMap::mergeArray($oldValue,array(
    			'grower'=>array(
						self::BELONGS_TO,'Grower',array('grower_id'=>'id'),'through'=>'property'
			 ),
    			'location'=>array(
    					self::BELONGS_TO,'Location',array('location_id'=>'id'),'through'=>'property'
    			),
    	)
    	);
    }
    
    /**
     * @return Property[]
     */
    public function getProperty(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	return Property::model()->findAll($criteria);
    }
    
    /**
     * @return Grower[]
     */
    public function getGrower(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	return Grower::model()->findAll($criteria);
    }
    
    /**
     * @return Location[]
     */
    public function getLocation(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	return Location::model()->findAll($criteria);
    }
    
    static function fillZeroDate($res, $title = null,$date_range = null, $fill = 0){
        
    }
    
    static function graphChecks($params){
		$block = self::model()->findByPk($params['id']);
        
		$sql = 'SELECT UNIX_TIMESTAMP(tc_date) as X, tc_value as "*1", pest_name as "|1" FROM '.TrapCheck::model()->tableName().' tc ';
		$sql .= 'LEFT JOIN '.Trap::model()->tableName().' t ON tc.trap_id = t.trap_id ';
		$sql .= 'LEFT JOIN '.Pest::model()->tableName().' p ON p.pest_id = t.pest_id ';
        $sql .= "WHERE id = {$params['id']}";
        if(isset($params['date_from']) && isset($params['date_to']))
            $sql .= " AND (tc_date BETWEEN '{$params['date_from']}' AND '{$params['date_to']})' ";
	
		//Build Title
		$title = $block->name;
		if(isset($params['date_from']) && isset($params['date_to'])){
			$title .= ' between '.$params['date_from'].' and '.$params['date_to'];
		}
		
		//Range
		$range = null;
		if(isset($params['date_from']) && isset($params['date_to'])){
			$range = array(strtotime($params['date_from']), strtotime($params['date_to']));
		}
        
        $res = Yii::app()->db->createCommand($sql)->query();
        $row = $res?$res->read():0;
        if ($row){
            
        }
		/*
		$res = \DB::getInstance()->Query($sql);
		$ret = new DatabaseZeroDatefill($res,$title,$range,null);
		$ret->schema->axis['X']->dateFormat = 'd';
		
		$where = new \Model\Database\SQL\Parts\Where($object->getIdentifyingSQL());
		
		$sql = 'SELECT DISTINCT pest_name FROM '.Trap::TABLE.' t';
		$sql .= ' LEFT JOIN '.Pest::TABLE.' p ON p.pest_id = t.pest_id ';
		$sql .= $where->toSQL(true);
		
		$res = \DB::getInstance()->Query($sql);
		
		//Images
		$ret->schema->color = array();
		while($row = $res->Fetch()){
			switch($row['pest_name']){
				case 'Codling Moth':
					$ret->schema->color[] = '#BCE02E';
					break;
						
				case 'LBAM':
					$ret->schema->color[] = '#E0642E';
					break;
		
				case 'OFM':
					$ret->schema->color[] = '#2E97E0';
					break;
					
				case 'Heliothis':
					$ret->schema->color[] = '#2E2EFF';
					break;
			}
		}
		*/
		return '';
	}
    
    static function graphReport($params){
        return '';
		$graph = static::graphChecks($params);
		$graph->schema->type = 'line';
		$graph->schema->grid = 5;
		$data = $graph->schema->data;		
		
		return $graph;
	}
    
}