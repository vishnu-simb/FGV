<?php
/**
 * This is the model base class for the table "{{block}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Block".
 *
 * Columns in table "{{block}}" available as properties of the model,
 * followed by relations of table "{{block}}" available as properties of the model.
 *
 * @property Grower $grower
 * @property Location $location
 */
Yii::import('application.models._base.BaseBlock');

class CommonBlock extends BaseBlock
{
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }
    
      /**
     * default scope
     * @return array
     * @see defaultScope
     */
    public function defaultScope(){
    	return array(
    			'alias'=>'block',
    			'condition'=>'block.is_deleted=0',
    			//'order'=>'artwork.sort ASC'
    	);
    }
    
    /**
     * scope of yii
     * @return array
     * @see scope of yii
     */
    public function scopes(){
    	return array(
    			'latest'=>array(
    					'order'=>'block.created_at DESC'
    			),
    			'sort'=>array(
    					'order'=>'block.ordering ASC',
    			)
    	);
    }
    
    /**
     * @return array
     */
    public function relations()
    {
    	// NOTE: you may need to adjust the relation name and the related
    	// class name for the relations automatically generated below.
    	$oldValue = parent::relations();
    	return CMap::mergeArray($oldValue,array(
    			'grower'=>array(
						self::BELONGS_TO,'Grower',array('grower_id'=>'id'),'through'=>'property'
			 ),
    			'location'=>array(
    					self::BELONGS_TO,'Location',array('location_id'=>'id'),'through'=>'property'
    			),
    	)
    	);
    }
    
    /**
     * @return Property[]
     */
    public function getProperty(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	$criteria->order = 'name';
    	return Property::model()->findAll($criteria);
    }
    
    /**
     * @return Grower[]
     */
    public function getGrower(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	$criteria->order = 'name';
    	return Grower::model()->findAll($criteria);
    }
    
    /**
     * @return Location[]
     */
    public function getLocation(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	$criteria->order = 'name';
    	return Location::model()->findAll($criteria);
    }
    
    /**
     * @return Property[]
     */
    function getPropertyByGrower(){       
		if(isset($this->grower) && !empty($this->grower)){
			return Property::model()->findAllByAttributes(array('grower_id'=>$this->grower),array('order'=>'name'));
		}else{
			return $this->getProperty();
		}
	}
	
    /**
     * @return Block[]
     */
	function getBlockByProperty(){
		if(isset($this->property) && !empty($this->property)){
			return $this->model()->findAllByAttributes(array('property_id'=>$this->property_id),array('order'=>'name'));
		}elseif(isset($this->grower) && !empty($this->grower)){
			$properties = $this->getPropertyByGrower();
			$prop = array();
			foreach($properties as $property){
				$prop[] = $property->id;
			}
			return $this->model()->findAllByAttributes(array('property_id'=>$prop),array('order'=>'name'));
		}else{
			return $this->model()->findAll();
		}
	}
    
    /**
     * @return Variety[]
     */
    public function getVariety(){
    	$criteria = new CDbCriteria();
    	$criteria->condition = 'is_deleted=:is_deleted';
    	$criteria->params = array(':is_deleted'=>'0');
    	$criteria->order = 'name';
    	return Variety::model()->findAll($criteria);
    }
 
}